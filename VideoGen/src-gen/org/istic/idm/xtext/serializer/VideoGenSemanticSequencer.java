/*
 * generated by Xtext
 */
package org.istic.idm.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.istic.idm.xtext.services.VideoGenGrammarAccess;
import org.istic.idm.xtext.videoGen.Alternatives;
import org.istic.idm.xtext.videoGen.Mandatory;
import org.istic.idm.xtext.videoGen.Optional;
import org.istic.idm.xtext.videoGen.Sequence;
import org.istic.idm.xtext.videoGen.VideoGen;
import org.istic.idm.xtext.videoGen.VideoGenPackage;

@SuppressWarnings("all")
public class VideoGenSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VideoGenGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VideoGenPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VideoGenPackage.ALTERNATIVES:
				sequence_Alternatives(context, (Alternatives) semanticObject); 
				return; 
			case VideoGenPackage.MANDATORY:
				sequence_Mandatory(context, (Mandatory) semanticObject); 
				return; 
			case VideoGenPackage.OPTIONAL:
				sequence_Optional(context, (Optional) semanticObject); 
				return; 
			case VideoGenPackage.SEQUENCE:
				sequence_Sequence(context, (Sequence) semanticObject); 
				return; 
			case VideoGenPackage.VIDEO_GEN:
				sequence_VideoGen(context, (VideoGen) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Statement returns Alternatives
	 *     Alternatives returns Alternatives
	 *
	 * Constraint:
	 *     (name=ID options+=Optional+)
	 */
	protected void sequence_Alternatives(ISerializationContext context, Alternatives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Mandatory
	 *     Mandatory returns Mandatory
	 *
	 * Constraint:
	 *     sequence=Sequence
	 */
	protected void sequence_Mandatory(ISerializationContext context, Mandatory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VideoGenPackage.Literals.MANDATORY__SEQUENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VideoGenPackage.Literals.MANDATORY__SEQUENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMandatoryAccess().getSequenceSequenceParserRuleCall_0(), semanticObject.getSequence());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Optional
	 *     Optional returns Optional
	 *
	 * Constraint:
	 *     (probability=INT? sequence=Sequence)
	 */
	protected void sequence_Optional(ISerializationContext context, Optional semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sequence returns Sequence
	 *
	 * Constraint:
	 *     (name=ID ((length=INT | mimetype=Mimetypes_Enum)? (url=STRING description=STRING?)?)+)
	 */
	protected void sequence_Sequence(ISerializationContext context, Sequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VideoGen returns VideoGen
	 *
	 * Constraint:
	 *     statements+=Statement+
	 */
	protected void sequence_VideoGen(ISerializationContext context, VideoGen semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
