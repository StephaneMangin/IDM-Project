/*
 * generated by Xtext
 */
grammar InternalVideoGen;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.istic.idm.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.istic.idm.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.istic.idm.xtext.services.VideoGenGrammarAccess;

}

@parser::members {

 	private VideoGenGrammarAccess grammarAccess;
 	
    public InternalVideoGenParser(TokenStream input, VideoGenGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "VideoGen";	
   	}
   	
   	@Override
   	protected VideoGenGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleVideoGen
entryRuleVideoGen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVideoGenRule()); }
	 iv_ruleVideoGen=ruleVideoGen 
	 { $current=$iv_ruleVideoGen.current; } 
	 EOF 
;

// Rule VideoGen
ruleVideoGen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='VideoGen' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVideoGenAccess().getVideoGenKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVideoGenAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVideoGenAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVideoGenRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVideoGenAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getMandatoryVideoSeqParserRuleCall_0()); 
    }
    this_MandatoryVideoSeq_0=ruleMandatoryVideoSeq
    { 
        $current = $this_MandatoryVideoSeq_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getOptionalVideoSeqParserRuleCall_1()); 
    }
    this_OptionalVideoSeq_1=ruleOptionalVideoSeq
    { 
        $current = $this_OptionalVideoSeq_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAlternativeParserRuleCall_2()); 
    }
    this_Alternative_2=ruleAlternative
    { 
        $current = $this_Alternative_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAlternative
entryRuleAlternative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativeRule()); }
	 iv_ruleAlternative=ruleAlternative 
	 { $current=$iv_ruleAlternative.current; } 
	 EOF 
;

// Rule Alternative
ruleAlternative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alternatives' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlternativeAccess().getAlternativesKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAlternativeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAlternativeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAlternativeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeAccess().getVideoseqsVideoSeqParserRuleCall_3_0()); 
	    }
		lv_videoseqs_3_0=ruleVideoSeq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeRule());
	        }
       		add(
       			$current, 
       			"videoseqs",
        		lv_videoseqs_3_0, 
        		"VideoSeq");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAlternativeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleVideoSeq
entryRuleVideoSeq returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVideoSeqRule()); }
	 iv_ruleVideoSeq=ruleVideoSeq 
	 { $current=$iv_ruleVideoSeq.current; } 
	 EOF 
;

// Rule VideoSeq
ruleVideoSeq returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='videoseq' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVideoSeqAccess().getVideoseqKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVideoSeqAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVideoSeqRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_url_2_0=RULE_STRING
		{
			newLeafNode(lv_url_2_0, grammarAccess.getVideoSeqAccess().getUrlSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVideoSeqRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"url",
        		lv_url_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVideoSeqAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='length=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVideoSeqAccess().getLengthKeyword_4_0());
    }
(
(
		lv_length_5_0=RULE_INT
		{
			newLeafNode(lv_length_5_0, grammarAccess.getVideoSeqAccess().getLengthINTTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVideoSeqRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"length",
        		lv_length_5_0, 
        		"INT");
	    }

)
))?(	otherlv_6='desc=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVideoSeqAccess().getDescKeyword_5_0());
    }
(
(
		lv_desc_7_0=RULE_STRING
		{
			newLeafNode(lv_desc_7_0, grammarAccess.getVideoSeqAccess().getDescSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVideoSeqRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"desc",
        		lv_desc_7_0, 
        		"STRING");
	    }

)
))?(	otherlv_8='prob=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getVideoSeqAccess().getProbKeyword_6_0());
    }
(
(
		lv_prob_9_0=RULE_INT
		{
			newLeafNode(lv_prob_9_0, grammarAccess.getVideoSeqAccess().getProbINTTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVideoSeqRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"prob",
        		lv_prob_9_0, 
        		"INT");
	    }

)
))?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getVideoSeqAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleMandatoryVideoSeq
entryRuleMandatoryVideoSeq returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMandatoryVideoSeqRule()); }
	 iv_ruleMandatoryVideoSeq=ruleMandatoryVideoSeq 
	 { $current=$iv_ruleMandatoryVideoSeq.current; } 
	 EOF 
;

// Rule MandatoryVideoSeq
ruleMandatoryVideoSeq returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mandatory' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMandatoryVideoSeqAccess().getMandatoryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMandatoryVideoSeqAccess().getVideoseqVideoSeqParserRuleCall_1_0()); 
	    }
		lv_videoseq_1_0=ruleVideoSeq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMandatoryVideoSeqRule());
	        }
       		set(
       			$current, 
       			"videoseq",
        		lv_videoseq_1_0, 
        		"VideoSeq");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOptionalVideoSeq
entryRuleOptionalVideoSeq returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalVideoSeqRule()); }
	 iv_ruleOptionalVideoSeq=ruleOptionalVideoSeq 
	 { $current=$iv_ruleOptionalVideoSeq.current; } 
	 EOF 
;

// Rule OptionalVideoSeq
ruleOptionalVideoSeq returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='optional' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOptionalVideoSeqAccess().getOptionalKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalVideoSeqAccess().getVideoseqVideoSeqParserRuleCall_1_0()); 
	    }
		lv_videoseq_1_0=ruleVideoSeq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalVideoSeqRule());
	        }
       		set(
       			$current, 
       			"videoseq",
        		lv_videoseq_1_0, 
        		"VideoSeq");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


