/*
 * generated by Xtext
 */
package org.istic.idm.xtext.videogen.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.istic.idm.xtext.videogen.services.VideoGenGrammarAccess;

public class VideoGenParser extends AbstractContentAssistParser {
	
	@Inject
	private VideoGenGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.istic.idm.xtext.videogen.ui.contentassist.antlr.internal.InternalVideoGenParser createParser() {
		org.istic.idm.xtext.videogen.ui.contentassist.antlr.internal.InternalVideoGenParser result = new org.istic.idm.xtext.videogen.ui.contentassist.antlr.internal.InternalVideoGenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getMimetypes_EnumAccess().getAlternatives(), "rule__Mimetypes_Enum__Alternatives");
					put(grammarAccess.getVideoGenAccess().getGroup(), "rule__VideoGen__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_0(), "rule__Statement__Group_0__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getAlternativesAccess().getGroup(), "rule__Alternatives__Group__0");
					put(grammarAccess.getOptionalAccess().getGroup(), "rule__Optional__Group__0");
					put(grammarAccess.getOptionalAccess().getGroup_0(), "rule__Optional__Group_0__0");
					put(grammarAccess.getSequenceAccess().getGroup(), "rule__Sequence__Group__0");
					put(grammarAccess.getSequenceAccess().getGroup_3_0(), "rule__Sequence__Group_3_0__0");
					put(grammarAccess.getSequenceAccess().getGroup_3_0_0(), "rule__Sequence__Group_3_0_0__0");
					put(grammarAccess.getSequenceAccess().getGroup_3_0_1(), "rule__Sequence__Group_3_0_1__0");
					put(grammarAccess.getSequenceAccess().getGroup_3_1(), "rule__Sequence__Group_3_1__0");
					put(grammarAccess.getSequenceAccess().getGroup_3_2(), "rule__Sequence__Group_3_2__0");
					put(grammarAccess.getVideoGenAccess().getStatementsAssignment_2(), "rule__VideoGen__StatementsAssignment_2");
					put(grammarAccess.getAlternativesAccess().getNameAssignment_1(), "rule__Alternatives__NameAssignment_1");
					put(grammarAccess.getAlternativesAccess().getOptionsAssignment_3(), "rule__Alternatives__OptionsAssignment_3");
					put(grammarAccess.getMandatoryAccess().getSequenceAssignment(), "rule__Mandatory__SequenceAssignment");
					put(grammarAccess.getOptionalAccess().getProbabilityAssignment_0_1(), "rule__Optional__ProbabilityAssignment_0_1");
					put(grammarAccess.getOptionalAccess().getSequenceAssignment_1(), "rule__Optional__SequenceAssignment_1");
					put(grammarAccess.getSequenceAccess().getNameAssignment_1(), "rule__Sequence__NameAssignment_1");
					put(grammarAccess.getSequenceAccess().getUrlAssignment_3_0_0_1(), "rule__Sequence__UrlAssignment_3_0_0_1");
					put(grammarAccess.getSequenceAccess().getDescriptionAssignment_3_0_1_1(), "rule__Sequence__DescriptionAssignment_3_0_1_1");
					put(grammarAccess.getSequenceAccess().getLengthAssignment_3_1_1(), "rule__Sequence__LengthAssignment_3_1_1");
					put(grammarAccess.getSequenceAccess().getMimetypeAssignment_3_2_1(), "rule__Sequence__MimetypeAssignment_3_2_1");
					put(grammarAccess.getSequenceAccess().getUnorderedGroup_3(), "rule__Sequence__UnorderedGroup_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.istic.idm.xtext.videogen.ui.contentassist.antlr.internal.InternalVideoGenParser typedParser = (org.istic.idm.xtext.videogen.ui.contentassist.antlr.internal.InternalVideoGenParser) parser;
			typedParser.entryRuleVideoGen();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public VideoGenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(VideoGenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
