/**
 * generated by Xtext
 */
package org.istic.idm.xtext.generator;

import PlayList.impl.PlayListImpl;
import PlayList.util.PlayListTransform;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.istic.idm.xtext.VideoGenTransform;
import org.istic.idm.xtext.videoGen.VideoGen;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PlayListGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    for (final EObject o : _contents) {
      this.compile(o, fsa);
    }
  }
  
  protected void _compile(final VideoGen v, final IFileSystemAccess fsa) {
    final PlayListImpl playList = VideoGenTransform.toPlayList(v);
    String _m3U = PlayListTransform.toM3U(playList);
    fsa.generateFile("playlist/videos.m3u", _m3U);
    String _m3UEXT = PlayListTransform.toM3UEXT(playList);
    fsa.generateFile("playlist/videos-extended.m3u", _m3UEXT);
    String _fFMPEG = PlayListTransform.toFFMPEG(playList);
    fsa.generateFile("playlist/videos.ffmpeg", _fFMPEG);
  }
  
  protected void _compile(final EObject m, final IFileSystemAccess fsa) {
  }
  
  public void compile(final EObject v, final IFileSystemAccess fsa) {
    if (v instanceof VideoGen) {
      _compile((VideoGen)v, fsa);
      return;
    } else if (v != null) {
      _compile(v, fsa);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(v, fsa).toString());
    }
  }
}
