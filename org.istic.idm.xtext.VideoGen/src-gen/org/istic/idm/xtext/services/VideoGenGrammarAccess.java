/*
 * generated by Xtext
 */
package org.istic.idm.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VideoGenGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VideoGenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VideoGen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoGenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//VideoGen:
		//	"VideoGen" BEGIN statements+=Statement+ END;
		@Override public ParserRule getRule() { return rule; }

		//"VideoGen" BEGIN statements+=Statement+ END
		public Group getGroup() { return cGroup; }

		//"VideoGen"
		public Keyword getVideoGenKeyword_0() { return cVideoGenKeyword_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cOptionalKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cOptionalParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMandatoryKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cMandatoryParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cAlternativesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	"Optional" Optional | "Mandatory" Mandatory | Alternatives;
		@Override public ParserRule getRule() { return rule; }

		//"Optional" Optional | "Mandatory" Mandatory | Alternatives
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Optional" Optional
		public Group getGroup_0() { return cGroup_0; }

		//"Optional"
		public Keyword getOptionalKeyword_0_0() { return cOptionalKeyword_0_0; }

		//Optional
		public RuleCall getOptionalParserRuleCall_0_1() { return cOptionalParserRuleCall_0_1; }

		//"Mandatory" Mandatory
		public Group getGroup_1() { return cGroup_1; }

		//"Mandatory"
		public Keyword getMandatoryKeyword_1_0() { return cMandatoryKeyword_1_0; }

		//Mandatory
		public RuleCall getMandatoryParserRuleCall_1_1() { return cMandatoryParserRuleCall_1_1; }

		//Alternatives
		public RuleCall getAlternativesParserRuleCall_2() { return cAlternativesParserRuleCall_2; }
	}

	public class AlternativesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOptionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionsOptionalParserRuleCall_3_0 = (RuleCall)cOptionsAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Alternatives:
		//	"Alternatives" name=ID BEGIN options+=Optional+ END;
		@Override public ParserRule getRule() { return rule; }

		//"Alternatives" name=ID BEGIN options+=Optional+ END
		public Group getGroup() { return cGroup; }

		//"Alternatives"
		public Keyword getAlternativesKeyword_0() { return cAlternativesKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }

		//options+=Optional+
		public Assignment getOptionsAssignment_3() { return cOptionsAssignment_3; }

		//Optional
		public RuleCall getOptionsOptionalParserRuleCall_3_0() { return cOptionsOptionalParserRuleCall_3_0; }

		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}

	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mandatory");
		private final Assignment cSequenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSequenceSequenceParserRuleCall_0 = (RuleCall)cSequenceAssignment.eContents().get(0);
		
		//Mandatory:
		//	sequence=Sequence;
		@Override public ParserRule getRule() { return rule; }

		//sequence=Sequence
		public Assignment getSequenceAssignment() { return cSequenceAssignment; }

		//Sequence
		public RuleCall getSequenceSequenceParserRuleCall_0() { return cSequenceSequenceParserRuleCall_0; }
	}

	public class OptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Optional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSequenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSequenceSequenceParserRuleCall_0_0 = (RuleCall)cSequenceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cProbabilityKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cProbabilityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cProbabilityINTTerminalRuleCall_1_1_0 = (RuleCall)cProbabilityAssignment_1_1.eContents().get(0);
		
		//Optional:
		//	sequence=Sequence ("probability="? probability=INT)?;
		@Override public ParserRule getRule() { return rule; }

		//sequence=Sequence ("probability="? probability=INT)?
		public Group getGroup() { return cGroup; }

		//sequence=Sequence
		public Assignment getSequenceAssignment_0() { return cSequenceAssignment_0; }

		//Sequence
		public RuleCall getSequenceSequenceParserRuleCall_0_0() { return cSequenceSequenceParserRuleCall_0_0; }

		//("probability="? probability=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"probability="?
		public Keyword getProbabilityKeyword_1_0() { return cProbabilityKeyword_1_0; }

		//probability=INT
		public Assignment getProbabilityAssignment_1_1() { return cProbabilityAssignment_1_1; }

		//INT
		public RuleCall getProbabilityINTTerminalRuleCall_1_1_0() { return cProbabilityINTTerminalRuleCall_1_1_0; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cDescriptionKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0_1_0 = (RuleCall)cDescriptionAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cLengthKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLengthAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_4_1_1_0 = (RuleCall)cLengthAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Keyword cMimetypeKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cMimetypeAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cMimetypeSTRINGTerminalRuleCall_4_2_1_0 = (RuleCall)cMimetypeAssignment_4_2_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Sequence:
		//	"Sequence" name=ID url=STRING BEGIN (("description=" description=STRING)? & ("length=" length=INT)? & ("mimetype="
		//	mimetype=STRING)?) END;
		@Override public ParserRule getRule() { return rule; }

		//"Sequence" name=ID url=STRING BEGIN (("description=" description=STRING)? & ("length=" length=INT)? & ("mimetype="
		//mimetype=STRING)?) END
		public Group getGroup() { return cGroup; }

		//"Sequence"
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//("description=" description=STRING)? & ("length=" length=INT)? & ("mimetype=" mimetype=STRING)?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//("description=" description=STRING)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"description="
		public Keyword getDescriptionKeyword_4_0_0() { return cDescriptionKeyword_4_0_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_4_0_1() { return cDescriptionAssignment_4_0_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0_1_0() { return cDescriptionSTRINGTerminalRuleCall_4_0_1_0; }

		//("length=" length=INT)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"length="
		public Keyword getLengthKeyword_4_1_0() { return cLengthKeyword_4_1_0; }

		//length=INT
		public Assignment getLengthAssignment_4_1_1() { return cLengthAssignment_4_1_1; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_4_1_1_0() { return cLengthINTTerminalRuleCall_4_1_1_0; }

		//("mimetype=" mimetype=STRING)?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"mimetype="
		public Keyword getMimetypeKeyword_4_2_0() { return cMimetypeKeyword_4_2_0; }

		//mimetype=STRING
		public Assignment getMimetypeAssignment_4_2_1() { return cMimetypeAssignment_4_2_1; }

		//STRING
		public RuleCall getMimetypeSTRINGTerminalRuleCall_4_2_1_0() { return cMimetypeSTRINGTerminalRuleCall_4_2_1_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	
	
	private final VideoGenElements pVideoGen;
	private final StatementElements pStatement;
	private final AlternativesElements pAlternatives;
	private final MandatoryElements pMandatory;
	private final OptionalElements pOptional;
	private final SequenceElements pSequence;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VideoGenGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVideoGen = new VideoGenElements();
		this.pStatement = new StatementElements();
		this.pAlternatives = new AlternativesElements();
		this.pMandatory = new MandatoryElements();
		this.pOptional = new OptionalElements();
		this.pSequence = new SequenceElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.istic.idm.xtext.VideoGen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//VideoGen:
	//	"VideoGen" BEGIN statements+=Statement+ END;
	public VideoGenElements getVideoGenAccess() {
		return pVideoGen;
	}
	
	public ParserRule getVideoGenRule() {
		return getVideoGenAccess().getRule();
	}

	//Statement:
	//	"Optional" Optional | "Mandatory" Mandatory | Alternatives;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Alternatives:
	//	"Alternatives" name=ID BEGIN options+=Optional+ END;
	public AlternativesElements getAlternativesAccess() {
		return pAlternatives;
	}
	
	public ParserRule getAlternativesRule() {
		return getAlternativesAccess().getRule();
	}

	//Mandatory:
	//	sequence=Sequence;
	public MandatoryElements getMandatoryAccess() {
		return pMandatory;
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}

	//Optional:
	//	sequence=Sequence ("probability="? probability=INT)?;
	public OptionalElements getOptionalAccess() {
		return pOptional;
	}
	
	public ParserRule getOptionalRule() {
		return getOptionalAccess().getRule();
	}

	//Sequence:
	//	"Sequence" name=ID url=STRING BEGIN (("description=" description=STRING)? & ("length=" length=INT)? & ("mimetype="
	//	mimetype=STRING)?) END;
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//terminal BEGIN:
	//	"synthetic:BEGIN";
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	} 

	//terminal END:
	//	"synthetic:END";
	public TerminalRule getENDRule() {
		return tEND;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
