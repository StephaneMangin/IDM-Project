/*
 * generated by Xtext
 */
package org.istic.idm.xtext.validation

import org.eclipse.xtext.validation.Check
import org.istic.idm.xtext.videoGen.VideoGenPackage.Literals
import org.istic.idm.xtext.videoGen.Alternatives
import org.istic.idm.xtext.videoGen.Sequence
import org.istic.idm.xtext.videoGen.Optional

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class VideoGenValidator extends AbstractVideoGenValidator {

  public static val INVALID_NAME = 'invalidName'
  public static val INVALID_PROBABILITY = 'invalidProbability'

	@Check
	def checkOptionalProbability(Optional optional) {
		if (optional.probability > 100) {
			error('Optional probability should not be higher than 100%', 
					Literals.OPTIONAL__PROBABILITY,
					INVALID_PROBABILITY)
		}
		else if (optional.probability == 100) {
			warning('Optional probability should not equal 100%, otherwize create a Mandatory sequence instead ;)', 
					Literals.OPTIONAL__PROBABILITY,
					INVALID_PROBABILITY)
		}
	}
	
	@Check
	def checkAlternativesProbability(Alternatives alternatives) {
		var total = 0
		for (option: alternatives.options) {
			total += option.probability
		}	
		if (total > 100) {
			error('Probabilities sum inside an alternatives should not exceed 100%', 
					Literals.ALTERNATIVES__OPTIONS,
					INVALID_PROBABILITY)
		}
	}
	
	@Check
	def checkStatementNameStartsWithAlphabet(Sequence sequence) {
		if (!Character.isAlphabetic(sequence.name.charAt(0))) {
			warning('Sequence name should start with a alphabet character followed by a number', 
					Literals.SEQUENCE__NAME,
					INVALID_NAME)
		}
	}
	
	@Check
	def checkStatementNameEndsWithNumeral(Sequence sequence) {
		if (!Character.isDigit(sequence.name.charAt(1))) {
			warning('Sequence name should be followed by a number', 
					Literals.SEQUENCE__NAME,
					INVALID_NAME)
		}
	}
	@Check
	def checkVideoSeqNameStartsWithAlphabet(Alternatives alternatives) {
		if (!Character.isAlphabetic(alternatives.name.charAt(0))) {
			warning('Alternatives name should start with a alphabet character followed by a number', 
					Literals.ALTERNATIVES__NAME,
					INVALID_NAME)
		}
	}
	
	@Check
	def checkVideoSeqNameEndsWithNumeral(Alternatives alternatives) {
		if (!Character.isDigit(alternatives.name.charAt(1))) {
			warning('ALternatives name should be followed by a number', 
					Literals.ALTERNATIVES__NAME,
					INVALID_NAME)
		}
	}
}
