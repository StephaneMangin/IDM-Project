/*
 * generated by Xtext
 */
package org.istic.idm.xtext.validation

import java.util.List
import org.eclipse.xtext.validation.Check
import org.istic.idm.xtext.videoGen.Alternatives
import org.istic.idm.xtext.videoGen.Optional
import org.istic.idm.xtext.videoGen.Sequence
import org.istic.idm.xtext.videoGen.VideoGenPackage.Literals

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class VideoGenValidator extends AbstractVideoGenValidator {

  public static val DUPLICATED_DESCRIPTION = 'duplicatedDescription'
  public static val DUPLICATED_URL = 'duplicatedURL'
  public static val INVALID_NAME = 'invalidName'
  public static val INVALID_URL = 'invalidUrl'
  public static val INVALID_PROBABILITY = 'invalidProbability'

	@Check
	def checkIsUrlExists(Sequence sequence) {
		val sequences = sequence.eResource.allContents.filter(typeof(Sequence)) as List<Sequence>
		var result = VideoGenValidatorHelper.checkIsUrlExistsError(sequences, sequence)
		if (result.isSet) {
			error(result.get, 
				Literals.SEQUENCE__URL,
				INVALID_URL)
		}
	}
	

	@Check
	def checkUniqueDescription(Sequence sequence) {
		val sequences = sequence.eResource.allContents.filter(typeof(Sequence)) as List<Sequence>
		var result = VideoGenValidatorHelper.checkUniqueDescriptionWarning(sequences, sequence)
		if (result.isSet) {
			info(result.get, 
				Literals.SEQUENCE__DESCRIPTION,
				DUPLICATED_DESCRIPTION)
		}
	}
	
	@Check
	def checkUniqueURL(Sequence sequence) {
		val sequences = sequence.eResource.allContents.filter(typeof(Sequence)) as List<Sequence>
		var result = VideoGenValidatorHelper.checkUniqueURLWarning(sequences, sequence)
		if (result.isSet) {
			info(result.get, 
				Literals.SEQUENCE__URL,
				DUPLICATED_URL)
		}
	}
	
	@Check
	def checkUniqueIdentifiers(Sequence sequence) {
		val sequences = sequence.eResource.allContents
			.filter(typeof(Sequence))
			.takeWhile[seq2 | !seq2.equals(sequence)] as List<Sequence>
		var result = VideoGenValidatorHelper.checkUniqueIdentifiersError(sequences, sequence)
		if (result.isSet) {
			error(result.get, 
				Literals.SEQUENCE__NAME,
				INVALID_NAME)
		}
	}
	
	@Check
	def checkOptionalProbability(Optional optional) {
		var result = VideoGenValidatorHelper.checkOptionalProbabilityError(optional)
		if (result.isSet) {
			warning(result.get, 
				Literals.OPTIONAL__PROBABILITY,
				INVALID_PROBABILITY)
		}
	}
	
	@Check
	def checkAlternativesProbability(Alternatives alternatives) {
		var result = VideoGenValidatorHelper.checkAlternativesProbabilityError(alternatives)
		if (result.isSet) {
			error(result.get, 
				Literals.ALTERNATIVES__OPTIONS,
				INVALID_PROBABILITY)
		}
	}
	
}
