package org.irisa.diverse.videogen.videoGen.aspects;

import com.google.common.base.Objects;
import fr.inria.diverse.k3.al.annotationprocessor.Aspect;
import fr.inria.diverse.k3.al.annotationprocessor.OverrideAspectMethod;
import fr.inria.diverse.k3.al.annotationprocessor.Step;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.irisa.diverse.videogen.transformations.helpers.VideoGenHelper;
import org.irisa.diverse.videogen.videoGen.Alternatives;
import org.irisa.diverse.videogen.videoGen.Optional;
import org.irisa.diverse.videogen.videoGen.Transition;
import org.irisa.diverse.videogen.videoGen.Video;
import org.irisa.diverse.videogen.videoGen.VideoGen;
import org.irisa.diverse.videogen.videoGen.aspects.AlternativesAspectAlternativesAspectProperties;
import org.irisa.diverse.videogen.videoGen.aspects.SequenceAspect;
import org.irisa.diverse.videogen.videoGen.aspects.TransitionAspect;
import org.irisa.diverse.videogen.videoGen.aspects.VideoAspect;
import org.irisa.diverse.videogen.videoGen.aspects.VideoGenAspect;
import org.irisa.diverse.videogen.videoGen.aspects.visitors.VideoGenDurationConstraintsAspect;

@Aspect(className = Alternatives.class)
@SuppressWarnings("all")
public class AlternativesAspect extends SequenceAspect {
  @Step
  @OverrideAspectMethod
  public static void execute(final Alternatives _self, final VideoGen videoGen) {
    final org.irisa.diverse.videogen.videoGen.aspects.AlternativesAspectAlternativesAspectProperties _self_ = org.irisa.diverse.videogen.videoGen.aspects.AlternativesAspectAlternativesAspectContext.getSelf(_self);
     if (_self instanceof org.irisa.diverse.videogen.videoGen.Alternatives){
    					fr.inria.diverse.k3.al.annotationprocessor.stepmanager.StepCommand command = new fr.inria.diverse.k3.al.annotationprocessor.stepmanager.StepCommand() {
    						@Override
    						public void execute() {
    							org.irisa.diverse.videogen.videoGen.aspects.AlternativesAspect._privk3_execute(_self_, (org.irisa.diverse.videogen.videoGen.Alternatives)_self,videoGen);
    						}
    					};
    					fr.inria.diverse.k3.al.annotationprocessor.stepmanager.IStepManager manager = fr.inria.diverse.k3.al.annotationprocessor.stepmanager.StepManagerRegistry.getInstance().findStepManager(_self);
    					if (manager != null) {
    						manager.executeStep(_self,command,"Alternatives","execute");
    					} else {
    						command.execute();
    					}
    					;
    } else  if (_self instanceof org.irisa.diverse.videogen.videoGen.Sequence){
    					org.irisa.diverse.videogen.videoGen.aspects.SequenceAspect.execute((org.irisa.diverse.videogen.videoGen.Sequence)_self,videoGen);
    } else  if (_self instanceof org.irisa.diverse.videogen.videoGen.Transition){
    					org.irisa.diverse.videogen.videoGen.aspects.TransitionAspect.execute((org.irisa.diverse.videogen.videoGen.Transition)_self,videoGen);
    } else  { throw new IllegalArgumentException("Unhandled parameter types: " + java.util.Arrays.<Object>asList(_self).toString()); };
  }
  
  private static void super_execute(final Alternatives _self, final VideoGen videoGen) {
    final org.irisa.diverse.videogen.videoGen.aspects.SequenceAspectSequenceAspectProperties _self_ = org.irisa.diverse.videogen.videoGen.aspects.SequenceAspectSequenceAspectContext.getSelf(_self);
     org.irisa.diverse.videogen.videoGen.aspects.SequenceAspect._privk3_execute(_self_, _self,videoGen);
  }
  
  protected static void _privk3_execute(final AlternativesAspectAlternativesAspectProperties _self_, final Alternatives _self, final VideoGen videoGen) {
    _self.setSelected(Boolean.valueOf(true));
    final Optional selectedOption = VideoGenHelper.selectOption(_self);
    boolean _notEquals = (!Objects.equal(selectedOption, null));
    if (_notEquals) {
      selectedOption.setSelected(Boolean.valueOf(true));
      Video _video = selectedOption.getVideo();
      _self.setVideo(_video);
      Video _video_1 = _self.getVideo();
      VideoAspect.select(_video_1);
      EList<Optional> _options = _self.getOptions();
      final Function1<Optional, Boolean> _function = (Optional it) -> {
        return it.getActive();
      };
      Iterable<Optional> _filter = IterableExtensions.<Optional>filter(_options, _function);
      final Function1<Optional, Boolean> _function_1 = (Optional it) -> {
        Video _video_2 = it.getVideo();
        Video _video_3 = _self.getVideo();
        return Boolean.valueOf(Objects.equal(_video_2, _video_3));
      };
      Iterable<Optional> _filter_1 = IterableExtensions.<Optional>filter(_filter, _function_1);
      final Function1<Optional, Boolean> _function_2 = (Optional it) -> {
        Transition _nextTransition = it.getNextTransition();
        return Boolean.valueOf((!Objects.equal(_nextTransition, null)));
      };
      Iterable<Optional> _filter_2 = IterableExtensions.<Optional>filter(_filter_1, _function_2);
      final Consumer<Optional> _function_3 = (Optional it) -> {
        Transition _nextTransition = it.getNextTransition();
        TransitionAspect.execute(_nextTransition, videoGen);
        TransitionAspect.callnextTransition(_self, Boolean.valueOf(false));
      };
      _filter_2.forEach(_function_3);
    }
    VideoGenAspect.log.info((("##### \'" + _self) + "\' is being processed."));
    VideoGenDurationConstraintsAspect.visit(videoGen);
    Boolean _executed = TransitionAspect.executed(_self);
    boolean _not = (!(_executed).booleanValue());
    if (_not) {
      Transition _nextTransition = _self.getNextTransition();
      boolean _tripleNotEquals = (_nextTransition != null);
      if (_tripleNotEquals) {
        TransitionAspect.executed(_self, Boolean.valueOf(true));
        Boolean _callnextTransition = TransitionAspect.callnextTransition(_self);
        if ((_callnextTransition).booleanValue()) {
          Transition _nextTransition_1 = _self.getNextTransition();
          TransitionAspect.execute(_nextTransition_1, videoGen);
        }
      }
    }
  }
}
