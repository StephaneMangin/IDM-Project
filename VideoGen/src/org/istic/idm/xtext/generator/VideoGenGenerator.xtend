/*
 * generated by Xtext
 */
package org.istic.idm.xtext.generator

import java.util.HashMap
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IFileSystemAccessExtension2
import org.eclipse.xtext.generator.IGenerator
import org.istic.idm.xtext.videoGen.Alternatives
import org.istic.idm.xtext.videoGen.Mandatory
import org.istic.idm.xtext.videoGen.Optional
import org.istic.idm.xtext.videoGen.Sequence
import org.istic.idm.xtext.videoGen.VideoGen
import org.istic.idm.xtext.utils.VideoGenChecker

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class VideoGenGenerator implements IGenerator {

	def saveVideoGen(URI uri, VideoGen videoGen) {
		var Resource rs = new ResourceSetImpl().createResource(uri);
		rs.getContents.add(videoGen);
		rs.save(new HashMap());
	}

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val videoGen = resource.allContents.filter(typeof(VideoGen)).head as VideoGen
		//VideoGenTransform.addMetadata(videoGen)
		// Videos list control
		fsa.generateFile('controls/videos-list.txt', resource.allContents.filter(typeof(Sequence)).map[url].join('\n'))
		// Structure control
		val content = new StringBuffer
		videoGen.statements.forEach [ statement |
			if (statement instanceof Mandatory) {
				content.append("Mandatory " + statement.sequence.name + "\n")
			} else if (statement instanceof Optional) {
				content.append("Optional " + statement.sequence.name + "\n")
			} else if (statement instanceof Alternatives) {
				content.append("Alternatives " + statement.name + "\n")
				statement.options.forEach [ option |
					content.append("\t Option " + option.sequence.name + "\n")
				]
			}
		]
		// Structure  control
		fsa.generateFile('controls/structure.txt', content.toString)

		// Generate corrected VideoGen instance grammar
		resource.contents.filter(typeof(VideoGen)).forEach[v |
			fsa.generateFile("corrected/test.vg", new VideoGenChecker().compile(v))
		]
		// Save the exported xmi
		val baseUri = (fsa as IFileSystemAccessExtension2).getURI(".")
		val tmpFile = URI.createURI(baseUri + "/" + "export.xmi")
		saveVideoGen(tmpFile, videoGen)
	}

}
