/*
 * generated by Xtext
 */
package org.istic.idm.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VideoGenGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VideoGenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VideoGen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoGenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VideoGen:
		//	"VideoGen" "{" statements+=Statement+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"VideoGen" "{" statements+=Statement+ "}"
		public Group getGroup() { return cGroup; }

		//"VideoGen"
		public Keyword getVideoGenKeyword_0() { return cVideoGenKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryVideoSeqParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalVideoSeqParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAlternativeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	MandatoryVideoSeq | OptionalVideoSeq | Alternative;
		@Override public ParserRule getRule() { return rule; }

		//MandatoryVideoSeq | OptionalVideoSeq | Alternative
		public Alternatives getAlternatives() { return cAlternatives; }

		//MandatoryVideoSeq
		public RuleCall getMandatoryVideoSeqParserRuleCall_0() { return cMandatoryVideoSeqParserRuleCall_0; }

		//OptionalVideoSeq
		public RuleCall getOptionalVideoSeqParserRuleCall_1() { return cOptionalVideoSeqParserRuleCall_1; }

		//Alternative
		public RuleCall getAlternativeParserRuleCall_2() { return cAlternativeParserRuleCall_2; }
	}

	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVideoseqsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVideoseqsVideoSeqParserRuleCall_3_0 = (RuleCall)cVideoseqsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Alternative:
		//	"alternatives" name=ID "{" videoseqs+=VideoSeq+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"alternatives" name=ID "{" videoseqs+=VideoSeq+ "}"
		public Group getGroup() { return cGroup; }

		//"alternatives"
		public Keyword getAlternativesKeyword_0() { return cAlternativesKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//videoseqs+=VideoSeq+
		public Assignment getVideoseqsAssignment_3() { return cVideoseqsAssignment_3; }

		//VideoSeq
		public RuleCall getVideoseqsVideoSeqParserRuleCall_3_0() { return cVideoseqsVideoSeqParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class VideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoseqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLengthKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLengthAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_4_1_0 = (RuleCall)cLengthAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDescKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDescAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDescSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDescAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cProbKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cProbAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cProbINTTerminalRuleCall_6_1_0 = (RuleCall)cProbAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//VideoSeq:
		//	"videoseq" name=ID url=STRING "{" ("length=" length=INT)? ("desc=" desc=STRING)? ("prob=" prob=INT)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"videoseq" name=ID url=STRING "{" ("length=" length=INT)? ("desc=" desc=STRING)? ("prob=" prob=INT)? "}"
		public Group getGroup() { return cGroup; }

		//"videoseq"
		public Keyword getVideoseqKeyword_0() { return cVideoseqKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("length=" length=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"length="
		public Keyword getLengthKeyword_4_0() { return cLengthKeyword_4_0; }

		//length=INT
		public Assignment getLengthAssignment_4_1() { return cLengthAssignment_4_1; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_4_1_0() { return cLengthINTTerminalRuleCall_4_1_0; }

		//("desc=" desc=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"desc="
		public Keyword getDescKeyword_5_0() { return cDescKeyword_5_0; }

		//desc=STRING
		public Assignment getDescAssignment_5_1() { return cDescAssignment_5_1; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_5_1_0() { return cDescSTRINGTerminalRuleCall_5_1_0; }

		//("prob=" prob=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"prob="
		public Keyword getProbKeyword_6_0() { return cProbKeyword_6_0; }

		//prob=INT
		public Assignment getProbAssignment_6_1() { return cProbAssignment_6_1; }

		//INT
		public RuleCall getProbINTTerminalRuleCall_6_1_0() { return cProbINTTerminalRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MandatoryVideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MandatoryVideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoseqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoseqVideoSeqParserRuleCall_1_0 = (RuleCall)cVideoseqAssignment_1.eContents().get(0);
		
		//MandatoryVideoSeq:
		//	"mandatory" videoseq=VideoSeq;
		@Override public ParserRule getRule() { return rule; }

		//"mandatory" videoseq=VideoSeq
		public Group getGroup() { return cGroup; }

		//"mandatory"
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }

		//videoseq=VideoSeq
		public Assignment getVideoseqAssignment_1() { return cVideoseqAssignment_1; }

		//VideoSeq
		public RuleCall getVideoseqVideoSeqParserRuleCall_1_0() { return cVideoseqVideoSeqParserRuleCall_1_0; }
	}

	public class OptionalVideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalVideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoseqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoseqVideoSeqParserRuleCall_1_0 = (RuleCall)cVideoseqAssignment_1.eContents().get(0);
		
		//OptionalVideoSeq:
		//	"optional" videoseq=VideoSeq;
		@Override public ParserRule getRule() { return rule; }

		//"optional" videoseq=VideoSeq
		public Group getGroup() { return cGroup; }

		//"optional"
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }

		//videoseq=VideoSeq
		public Assignment getVideoseqAssignment_1() { return cVideoseqAssignment_1; }

		//VideoSeq
		public RuleCall getVideoseqVideoSeqParserRuleCall_1_0() { return cVideoseqVideoSeqParserRuleCall_1_0; }
	}
	
	
	private final VideoGenElements pVideoGen;
	private final StatementElements pStatement;
	private final AlternativeElements pAlternative;
	private final VideoSeqElements pVideoSeq;
	private final MandatoryVideoSeqElements pMandatoryVideoSeq;
	private final OptionalVideoSeqElements pOptionalVideoSeq;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VideoGenGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVideoGen = new VideoGenElements();
		this.pStatement = new StatementElements();
		this.pAlternative = new AlternativeElements();
		this.pVideoSeq = new VideoSeqElements();
		this.pMandatoryVideoSeq = new MandatoryVideoSeqElements();
		this.pOptionalVideoSeq = new OptionalVideoSeqElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.istic.idm.xtext.VideoGen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//VideoGen:
	//	"VideoGen" "{" statements+=Statement+ "}";
	public VideoGenElements getVideoGenAccess() {
		return pVideoGen;
	}
	
	public ParserRule getVideoGenRule() {
		return getVideoGenAccess().getRule();
	}

	//Statement:
	//	MandatoryVideoSeq | OptionalVideoSeq | Alternative;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Alternative:
	//	"alternatives" name=ID "{" videoseqs+=VideoSeq+ "}";
	public AlternativeElements getAlternativeAccess() {
		return pAlternative;
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}

	//VideoSeq:
	//	"videoseq" name=ID url=STRING "{" ("length=" length=INT)? ("desc=" desc=STRING)? ("prob=" prob=INT)? "}";
	public VideoSeqElements getVideoSeqAccess() {
		return pVideoSeq;
	}
	
	public ParserRule getVideoSeqRule() {
		return getVideoSeqAccess().getRule();
	}

	//MandatoryVideoSeq:
	//	"mandatory" videoseq=VideoSeq;
	public MandatoryVideoSeqElements getMandatoryVideoSeqAccess() {
		return pMandatoryVideoSeq;
	}
	
	public ParserRule getMandatoryVideoSeqRule() {
		return getMandatoryVideoSeqAccess().getRule();
	}

	//OptionalVideoSeq:
	//	"optional" videoseq=VideoSeq;
	public OptionalVideoSeqElements getOptionalVideoSeqAccess() {
		return pOptionalVideoSeq;
	}
	
	public ParserRule getOptionalVideoSeqRule() {
		return getOptionalVideoSeqAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
