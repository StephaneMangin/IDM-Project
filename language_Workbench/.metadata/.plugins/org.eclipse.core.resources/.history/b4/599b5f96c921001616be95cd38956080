package org.irisa.diverse.videogen.videoGen.aspects.visitors;

import java.util.List;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.irisa.diverse.videogen.transformations.helpers.VideoGenHelper;
import org.irisa.diverse.videogen.videoGen.Alternatives;
import org.irisa.diverse.videogen.videoGen.Mandatory;
import org.irisa.diverse.videogen.videoGen.Optional;
import org.irisa.diverse.videogen.videoGen.Sequence;
import org.irisa.diverse.videogen.videoGen.Video;
import org.irisa.diverse.videogen.videoGen.VideoGen;
import org.irisa.diverse.videogen.videoGen.aspects.utils.LoggableVisitor;

@SuppressWarnings("all")
public class VideoGenContraintsMinMaxVisitor extends LoggableVisitor {
  public int minDuration;
  
  public int maxDuration;
  
  private Boolean selected;
  
  public VideoGenContraintsMinMaxVisitor(final Boolean selected) {
    super();
    this.selected = selected;
    this.log.info(("Selected mode: " + selected));
  }
  
  public VideoGenContraintsMinMaxVisitor visit(final VideoGen vid) {
    VideoGenContraintsMinMaxVisitor _xblockexpression = null;
    {
      this.minDuration = 0;
      this.maxDuration = 0;
      this.log.info("VideoGen Constraints Min Max Visitor started...");
      List<Sequence> _allSequences = VideoGenHelper.allSequences(vid);
      final Consumer<Sequence> _function = (Sequence it) -> {
        this.visit(it);
      };
      _allSequences.forEach(_function);
      _xblockexpression = this;
    }
    return _xblockexpression;
  }
  
  private void visit(final Sequence seq) {
    Boolean _active = seq.getActive();
    if ((_active).booleanValue()) {
      String _string = seq.toString();
      this.log.info(_string);
      if ((seq instanceof Mandatory)) {
        this.visit(((Mandatory)seq));
      } else {
        if ((seq instanceof Optional)) {
          this.visit(((Optional)seq));
        } else {
          if ((seq instanceof Alternatives)) {
            this.visit(((Alternatives)seq));
          }
        }
      }
      this.log.info(((("minDUration:" + Integer.valueOf(this.minDuration)) + ", maxDUration:") + Integer.valueOf(this.maxDuration)));
    }
  }
  
  private int visit(final Mandatory man) {
    int _xblockexpression = (int) 0;
    {
      Video _video = man.getVideo();
      Integer _duration = _video.getDuration();
      String _plus = ("duration: " + _duration);
      this.log.info(_plus);
      int _minDuration = this.minDuration;
      Video _video_1 = man.getVideo();
      Integer _duration_1 = _video_1.getDuration();
      this.minDuration = (_minDuration + (_duration_1).intValue());
      int _maxDuration = this.maxDuration;
      Video _video_2 = man.getVideo();
      Integer _duration_2 = _video_2.getDuration();
      _xblockexpression = this.maxDuration = (_maxDuration + (_duration_2).intValue());
    }
    return _xblockexpression;
  }
  
  private int visit(final Alternatives alt) {
    int _xblockexpression = (int) 0;
    {
      EList<Optional> _options = alt.getOptions();
      final Function1<Optional, Integer> _function = (Optional it) -> {
        Video _video = it.getVideo();
        return _video.getDuration();
      };
      List<Integer> durations = ListExtensions.<Optional, Integer>map(_options, _function);
      if ((this.selected).booleanValue()) {
        EList<Optional> _options_1 = alt.getOptions();
        final Function1<Optional, Boolean> _function_1 = (Optional it) -> {
          return this.selected;
        };
        Iterable<Optional> _filter = IterableExtensions.<Optional>filter(_options_1, _function_1);
        final Function1<Optional, Integer> _function_2 = (Optional it) -> {
          Video _video = it.getVideo();
          return _video.getDuration();
        };
        Iterable<Integer> _map = IterableExtensions.<Optional, Integer>map(_filter, _function_2);
        List<Integer> _list = IterableExtensions.<Integer>toList(_map);
        durations = _list;
      }
      int _minDuration = this.minDuration;
      Integer _min = IterableExtensions.<Integer>min(durations);
      this.minDuration = (_minDuration + (_min).intValue());
      int _maxDuration = this.maxDuration;
      Integer _max = IterableExtensions.<Integer>max(durations);
      _xblockexpression = this.maxDuration = (_maxDuration + (_max).intValue());
    }
    return _xblockexpression;
  }
  
  private int visit(final Optional opt) {
    int _xblockexpression = (int) 0;
    {
      boolean _and = false;
      if (!(this.selected).booleanValue()) {
        _and = false;
      } else {
        Boolean _selected = opt.getSelected();
        _and = (_selected).booleanValue();
      }
      if (_and) {
        int _minDuration = this.minDuration;
        Video _video = opt.getVideo();
        Integer _duration = _video.getDuration();
        this.minDuration = (_minDuration + (_duration).intValue());
      }
      int _maxDuration = this.maxDuration;
      Video _video_1 = opt.getVideo();
      Integer _duration_1 = _video_1.getDuration();
      _xblockexpression = this.maxDuration = (_maxDuration + (_duration_1).intValue());
    }
    return _xblockexpression;
  }
}
