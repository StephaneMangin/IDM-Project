package org.irisa.diverse.videogen.videoGen.aspects.visitors;

import com.google.common.base.Objects;
import fr.inria.diverse.k3.al.annotationprocessor.Aspect;
import java.util.List;
import org.chocosolver.solver.Solver;
import org.chocosolver.solver.variables.BoolVar;
import org.chocosolver.solver.variables.IntVar;
import org.chocosolver.solver.variables.VariableFactory;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.irisa.diverse.videogen.videoGen.Optional;
import org.irisa.diverse.videogen.videoGen.Video;
import org.irisa.diverse.videogen.videoGen.VideoGen;
import org.irisa.diverse.videogen.videoGen.aspects.visitors.OptionalDurationConstraintsAspectOptionalAspectProperties;
import org.irisa.diverse.videogen.videoGen.aspects.visitors.VideoGenDurationConstraintsAspect;

@Aspect(className = Optional.class)
@SuppressWarnings("all")
public class OptionalDurationConstraintsAspect {
  public static IntVar visit(final Optional _self, final VideoGen vid) {
    final org.irisa.diverse.videogen.videoGen.aspects.visitors.OptionalDurationConstraintsAspectOptionalAspectProperties _self_ = org.irisa.diverse.videogen.videoGen.aspects.visitors.OptionalDurationConstraintsAspectOptionalAspectContext.getSelf(_self);
    Object result = null;
    result = _privk3_visit(_self_, _self,vid);;
    return (org.chocosolver.solver.variables.IntVar)result;
  }
  
  public static void applyConstraints(final Optional _self, final VideoGen vid) {
    final org.irisa.diverse.videogen.videoGen.aspects.visitors.OptionalDurationConstraintsAspectOptionalAspectProperties _self_ = org.irisa.diverse.videogen.videoGen.aspects.visitors.OptionalDurationConstraintsAspectOptionalAspectContext.getSelf(_self);
    _privk3_applyConstraints(_self_, _self,vid);;
  }
  
  protected static IntVar _privk3_visit(final OptionalDurationConstraintsAspectOptionalAspectProperties _self_, final Optional _self, final VideoGen vid) {
    IntVar _xblockexpression = null;
    {
      IntVar ft = null;
      Boolean _active = _self.getActive();
      if ((_active).booleanValue()) {
        Boolean _selected = _self.getSelected();
        if ((_selected).booleanValue()) {
          String _name = _self.getName();
          Solver _solver = VideoGenDurationConstraintsAspect.solver(vid);
          IntVar _fixed = VariableFactory.fixed(_name, 1, _solver);
          ft = _fixed;
        } else {
          String _name_1 = _self.getName();
          Solver _solver_1 = VideoGenDurationConstraintsAspect.solver(vid);
          BoolVar _bool = VariableFactory.bool(_name_1, _solver_1);
          ft = _bool;
        }
      } else {
        String _name_2 = _self.getName();
        Solver _solver_2 = VideoGenDurationConstraintsAspect.solver(vid);
        IntVar _fixed_1 = VariableFactory.fixed(_name_2, 0, _solver_2);
        ft = _fixed_1;
      }
      Video _video = _self.getVideo();
      Integer _duration = _video.getDuration();
      VideoGenDurationConstraintsAspect.addVar(vid, ft, (_duration).intValue());
      _xblockexpression = ft;
    }
    return _xblockexpression;
  }
  
  protected static void _privk3_applyConstraints(final OptionalDurationConstraintsAspectOptionalAspectProperties _self_, final Optional _self, final VideoGen vid) {
    List<IntVar> _variables = VideoGenDurationConstraintsAspect.variables(vid);
    final Function1<IntVar, Boolean> _function = (IntVar it) -> {
      int _value = it.getValue();
      return Boolean.valueOf((_value == 0));
    };
    Iterable<IntVar> _filter = IterableExtensions.<IntVar>filter(_variables, _function);
    final Function1<IntVar, Boolean> _function_1 = (IntVar it) -> {
      String _name = it.getName();
      String _name_1 = _self.getName();
      return Boolean.valueOf(Objects.equal(_name, _name_1));
    };
    boolean _exists = IterableExtensions.<IntVar>exists(_filter, _function_1);
    if (_exists) {
      _self.setActive(Boolean.valueOf(false));
    }
  }
}
